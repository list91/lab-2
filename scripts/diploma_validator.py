import os
import re
from typing import Dict, List, Any
import docx
from docx.shared import Pt, Mm
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT, WD_LINE_SPACING

class DiplomaValidator:
    EXPECTED_CHAPTERS = [
        '1. –í–≤–µ–¥–µ–Ω–∏–µ',
        '2. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å',
        '3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è',
        '4. –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
        '5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
        '6. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å',
        '7. –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è',
        '8. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    ]

    def __init__(self, document_path: str):
        self.document = docx.Document(document_path)
        self.validation_results = {
            '—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è': [],
            '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è': [],
            '—Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ_–∑–∞–º–µ—á–∞–Ω–∏—è': [],
            '–º–µ—Ç—Ä–∏–∫–∏_–¥–æ–∫—É–º–µ–Ω—Ç–∞': {}
        }

    def check_document_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        chapters = [
            p.text for p in self.document.paragraphs 
            if p.style and 'Heading' in p.style.name
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–ª–∞–≤
        for expected_chapter in self.EXPECTED_CHAPTERS:
            if not any(expected_chapter in chapter for chapter in chapters):
                self.validation_results['—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'].append(
                    f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª–∞–≤–∞: {expected_chapter}'
                )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –≥–ª–∞–≤
        chapter_order = [chapter for chapter in chapters if any(ec in chapter for ec in self.EXPECTED_CHAPTERS)]
        if chapter_order != self.EXPECTED_CHAPTERS:
            self.validation_results['—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'].append(
                '‚ùå –ù–∞—Ä—É—à–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≥–ª–∞–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ'
            )

    def check_technical_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ì–û–°–¢"""
        sections = self.document.sections
        for section in sections:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
            checks = [
                (section.left_margin.inches, 1.18, '–õ–µ–≤–æ–µ –ø–æ–ª–µ'),
                (section.right_margin.inches, 0.39, '–ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ'),
                (section.top_margin.inches, 0.79, '–í–µ—Ä—Ö–Ω–µ–µ –ø–æ–ª–µ'),
                (section.bottom_margin.inches, 0.79, '–ù–∏–∂–Ω–µ–µ –ø–æ–ª–µ')
            ]

            for current, expected, name in checks:
                if abs(current * 25.4 - expected * 25.4) > 1:  # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1 –º–º
                    self.validation_results['—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'].append(
                        f'‚ùå {name} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Ç–µ–∫—É—â–µ–µ: {current * 25.4:.2f} –º–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {expected * 25.4:.2f} –º–º)'
                    )

    def check_typography(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        font_errors = 0
        for paragraph in self.document.paragraphs:
            if paragraph.runs:
                run = paragraph.runs[0]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞
                if run.font.name != 'Times New Roman':
                    font_errors += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
                if run.font.size and run.font.size.pt != 14:
                    font_errors += 1

        if font_errors > 10:
            self.validation_results['—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'].append(
                f'‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {font_errors} –Ω–∞—Ä—É—à–µ–Ω–∏–π —à—Ä–∏—Ñ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞'
            )

    def calculate_document_metrics(self):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        paragraphs = [p for p in self.document.paragraphs if p.text.strip()]
        words = sum(len(p.text.split()) for p in paragraphs)
        characters = sum(len(p.text) for p in paragraphs)

        self.validation_results['–º–µ—Ç—Ä–∏–∫–∏_–¥–æ–∫—É–º–µ–Ω—Ç–∞'] = {
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤': len(paragraphs),
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤': words,
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–∏–º–≤–æ–ª–æ–≤': characters,
            '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–∞–Ω–∏—Ü': len(paragraphs) // 10
        }

    def check_formatting_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        paragraph_styles = {}
        for paragraph in self.document.paragraphs:
            if paragraph.style:
                paragraph_styles[paragraph.style.name] = paragraph_styles.get(paragraph.style.name, 0) + 1

        if len(paragraph_styles) > 5:
            self.validation_results['—Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ_–∑–∞–º–µ—á–∞–Ω–∏—è'].append(
                f'‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π: {list(paragraph_styles.keys())}'
            )

    def validate(self):
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        self.check_document_structure()
        self.check_technical_requirements()
        self.check_typography()
        self.calculate_document_metrics()
        self.check_formatting_consistency()
        return self.validation_results

def main():
    document_path = '/home/user/study/diplom/diploma.docx'
    validator = DiplomaValidator(document_path)
    results = validator.validate()

    print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∏–ø–ª–æ–º–∞:\n")
    
    print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    for req in results['—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è']:
        print(req)
    
    print("\n‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    for req in results['—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è']:
        print(req)
    
    print("\n‚úèÔ∏è –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:")
    for note in results['—Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ_–∑–∞–º–µ—á–∞–Ω–∏—è']:
        print(note)
    
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    for metric, value in results['–º–µ—Ç—Ä–∏–∫–∏_–¥–æ–∫—É–º–µ–Ω—Ç–∞'].items():
        print(f"{metric.replace('_', ' ').capitalize()}: {value}")

if __name__ == '__main__':
    main()
