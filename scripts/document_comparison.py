import docx
from docx.shared import Pt, RGBColor
import os

def compare_documents(template_path, generated_path):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    template_doc = docx.Document(template_path)
    generated_doc = docx.Document(generated_path)

    print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    print("üìã –°—Ç–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    template_styles = {style.name for style in template_doc.styles}
    generated_styles = {style.name for style in generated_doc.styles}
    
    missing_styles = template_styles - generated_styles
    if missing_styles:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª–∏: {missing_styles}")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüñãÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:")
    def analyze_paragraph_formatting(paragraphs, doc_type):
        formatting_issues = []
        for i, paragraph in enumerate(paragraphs):
            if paragraph.runs:
                run = paragraph.runs[0]
                if run.font.name != 'Times New Roman':
                    formatting_issues.append(f"{doc_type} –∞–±–∑–∞—Ü {i+1}: –®—Ä–∏—Ñ—Ç {run.font.name}")
                if run.font.size and run.font.size.pt != 16:
                    formatting_issues.append(f"{doc_type} –∞–±–∑–∞—Ü {i+1}: –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ {run.font.size.pt}")
        return formatting_issues

    template_formatting_issues = analyze_paragraph_formatting(template_doc.paragraphs, "–®–∞–±–ª–æ–Ω")
    generated_formatting_issues = analyze_paragraph_formatting(generated_doc.paragraphs, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")

    if template_formatting_issues:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ:")
        for issue in template_formatting_issues[:5]:
            print(issue)

    if generated_formatting_issues:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
        for issue in generated_formatting_issues[:5]:
            print(issue)

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞
    print("\nüé® –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞:")
    def analyze_text_color(paragraphs, doc_type):
        color_issues = []
        for i, paragraph in enumerate(paragraphs):
            for run in paragraph.runs:
                if run.font.color and run.font.color.rgb != RGBColor(0, 0, 0):
                    color_issues.append(f"{doc_type} –∞–±–∑–∞—Ü {i+1}: –¶–≤–µ—Ç {run.font.color.rgb}")
        return color_issues

    template_color_issues = analyze_text_color(template_doc.paragraphs, "–®–∞–±–ª–æ–Ω")
    generated_color_issues = analyze_text_color(generated_doc.paragraphs, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")

    if template_color_issues:
        print("‚ùå –¶–≤–µ—Ç–æ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —à–∞–±–ª–æ–Ω–µ:")
        for issue in template_color_issues[:5]:
            print(issue)

    if generated_color_issues:
        print("\n‚ùå –¶–≤–µ—Ç–æ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ:")
        for issue in generated_color_issues[:5]:
            print(issue)

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞
    print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    print(f"–®–∞–±–ª–æ–Ω: {len(template_doc.paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {len(generated_doc.paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")

    template_text = ' '.join(p.text for p in template_doc.paragraphs if p.text.strip())
    generated_text = ' '.join(p.text for p in generated_doc.paragraphs if p.text.strip())

    print(f"–®–∞–±–ª–æ–Ω: {len(template_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤")

def main():
    template_path = '/home/user/Downloads/vkr-2024.docx'
    generated_path = '/home/user/study/diplom/diploma.docx'
    compare_documents(template_path, generated_path)

if __name__ == '__main__':
    main()
